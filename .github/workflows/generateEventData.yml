name: 'Generate Event Data'

on:
  push:
  pull_request:
  pull_request_review:
  pull_request_review_comment:
  issues:
  issue_comment:
  check_run:
  check_suite:
  status:
  deployment_status:
  release:

jobs:
  createEvent:
    name: Create Event
    runs-on: ubuntu-latest
    env:
      EVENT_NAME: ${{github.event_name}}
      METADATA: ${{ toJSON(github.event) }}
      SOURCE: github
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Setup
        run: >
          pip install pandas
          pip install pyarrow
          pip install fastparquet

      - name: generateEvent
        run: |
          import pandas as pd
          import os
          import json
          import hashlib

          event_type = os.environ['EVENT_NAME']
          source = os.environ['SOURCE']
          types = {"push", "pull_request", "pull_request_review",
              "pull_request_review_comment", "issues",
              "issue_comment", "check_run", "check_suite", "status",
              "deployment_status", "release"}
          github_events = []

          if event_type not in types:
              raise Exception("Unsupported GitHub event: '%s'" % event_type)

          metadata = json.loads(os.environ['METADATA'])

          if event_type == "push":
              time_created = metadata["head_commit"]["timestamp"]
              e_id = metadata["head_commit"]["id"]

          if event_type == "pull_request":
              time_created = metadata["pull_request"]["updated_at"]
              e_id = metadata["repository"]["name"] + "/" + str(metadata["number"])

          if event_type == "pull_request_review":
              time_created = metadata["review"]["submitted_at"]
              e_id = metadata["review"]["id"]

          if event_type == "pull_request_review_comment":
              time_created = metadata["comment"]["updated_at"]
              e_id = metadata["comment"]["id"]

          if event_type == "issues":
              time_created = metadata["issue"]["updated_at"]
              e_id = metadata["repository"]["name"] + "/" + str(metadata["issue"]["number"])

          if event_type == "issue_comment":
              time_created = metadata["comment"]["updated_at"]
              e_id = metadata["comment"]["id"]

          if event_type == "check_run":
              time_created = (metadata["check_run"]["completed_at"] or
                              metadata["check_run"]["started_at"])
              e_id = metadata["check_run"]["id"]

          if event_type == "check_suite":
              time_created = (metadata["check_suite"]["updated_at"] or
                              metadata["check_suite"]["created_at"])
              e_id = metadata["check_suite"]["id"]

          if event_type == "deployment_status":
              time_created = metadata["deployment_status"]["updated_at"]
              e_id = metadata["deployment_status"]["id"]

          if event_type == "status":
              time_created = metadata["updated_at"]
              e_id = metadata["id"]

          if event_type == "release":
              time_created = (metadata["release"]["published_at"] or
                              metadata["release"]["created_at"])
              e_id = metadata["release"]["id"]

          signature = hashlib.sha224(json.dumps(metadata).encode('utf-8')).hexdigest()

          github_events.append([
              event_type,
              e_id,
              json.dumps(metadata),
              time_created,
              signature,
              None,
              source
          ])

          df = pd.DataFrame(github_events, columns = ['event_type','id', 'metadata', 'time_created', 'signature', 'msg_id', 'source']) 
          print(df)

          os.mkdir("events")
          f = open(f'./events/{signature}.parquet', "wb")
          f.write(df.to_parquet())
          f.close()

        shell: python

      - name: Upload to S3
        run: |
          aws s3 sync ./events s3://atbank-cicd-datalake-github-logs/events/$(date '+%Y%m%d')
